import credentials from "../credentials.json";

import {
  GoogleSpreadsheet,
  GoogleSpreadsheetRow,
  GoogleSpreadsheetWorksheet,
} from "google-spreadsheet";

import { JWT } from "google-auth-library";
import { Student } from "./types/students";

const SHEET_ID = "1WZazdk_lz4Xdkb8VzhRkFrPXO3nL052VHcLveTDts9s";
const ROW_OFFSET = 2;

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: credentials.client_email,
  key: credentials.private_key,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

const spreadsheet = new GoogleSpreadsheet(SHEET_ID, serviceAccountAuth);

const monthOnMonth = async () => {
  spreadsheet.loadInfo().then(async () => {
    const sheet = spreadsheet.sheetsByIndex[1];
    console.log("Bazinga");

    await sheet.addRows([
      { Month: "May", Sales: 29 },
      { Month: "June", Sales: 34 },
      { Month: "July", Sales: 42 },
    ]);
  });
};

const asDb = async () => {
  await spreadsheet.loadInfo();
  const sheet = spreadsheet.sheetsByIndex[0];

  return {
    getRecords: async () => {
      const rows = await sheet.getRows().then((rows) => {
        return rows.map((row) => {
          return {
            id: row.rowNumber,
            RegNo: row.get("RegNo"),
            Name: row.get("Name"),
            Gender: row.get("Gender"),
            Age: row.get("Age"),
          } as Student;
        });
      });

      return rows;
    },

    addRecord: (student: Student) => {
      return sheet.addRow(student as any);
    },

    get: (id: number) => {
      try {
        return sheet.getRows().then((rows) => {
          const row = rows[id - ROW_OFFSET];

          return {
            id: row.rowNumber,
            RegNo: row.get("RegNo"),
            Name: row.get("Name"),
            Gender: row.get("Gender"),
            Age: row.get("Age"),
          } as Student;
        });
      } catch (error) {
        throw new Error("404! Record not found");
      }
    },

    updateRecord: (student: Student) => {
      if (!student.id) {
        throw new Error("Id is required");
      }
      try {
        return sheet.getRows().then((rows) => {
          const row = rows[student.id! - ROW_OFFSET];
          row.assign(student as any);
          return row.save();
        });
      } catch (error) {
        throw new Error("404! Record not found");
      }
    },
  };
};

asDb().then((db) => {
  // db.addRecord({
  //   Name: "John Doe",
  //   RegNo: "CS/0001/2017",
  //   Age: 23,
  //   Gender: "Male"
  // })

  // db.getRecords().then(console.table)

  // db.updateRecord({
  //   id: 3,
  //   Name: "John Batowski",
  //   RegNo: "CS/0001/2019",
  //   Age: 20,
  //   Gender: "Male",
  // });

  db.get(2).then(console.log);
});
